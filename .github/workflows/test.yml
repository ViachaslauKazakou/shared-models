name: Pull Request Checks

on:
  pull_request:
    branches: [main]
  push:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.12']
    
    services:
      postgres:
        image: pgvector/pgvector:pg15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.0
          virtualenvs-create: true
          virtualenvs-in-project: true

      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-ansi

      - name: Check code formatting with black
        run: |
          poetry run black --check . || echo "Black formatting check failed (continuing)"

    #   - name: Run type checking with mypy
    #     run: |
    #       poetry run mypy shared_models/ || echo "MyPy type checking failed (continuing)"
    #     continue-on-error: true

    #   - name: Test database connection
    #     env:
    #       DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_db
    #     run: |
    #       poetry run python test_db.py

    #   - name: Run database migrations
    #     env:
    #       DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_db
    #     run: |
    #       poetry run alembic upgrade head

    #   - name: Test model relationships
    #     env:
    #       DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_db
    #     run: |
    #       poetry run python test_relationships.py

    #   - name: Run pytest tests
    #     env:
    #       DATABASE_URL: postgresql+psycopg2://postgres:postgres@localhost:5432/test_db
    #     run: |
    #       poetry run pytest -v || echo "No tests found or tests failed (continuing)"
    #     continue-on-error: true

      - name: Build package
        run: |
          poetry build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-packages-${{ matrix.python-version }}
          path: dist/

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'

      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          version: 2.1.0

      - name: Install dependencies
        run: poetry install --no-interaction --no-ansi

      - name: Run flake8
        run: |
          poetry run flake8 shared_models/ --count --select=E9,F63,F7,F82 --show-source --statistics || echo "Flake8 critical errors check failed (continuing)"
        continue-on-error: true

      - name: Run additional flake8 checks
        run: |
          poetry run flake8 shared_models/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || echo "Flake8 additional checks failed (continuing)"
        continue-on-error: true
