#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ Task –≤ –Ω–æ–≤–æ–º —Å—Ç–∏–ª–µ SQLAlchemy 2.0
"""

import sys
import os
import uuid
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ shared_models –≤ sys.path
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '.'))

from shared_models import Task, SessionLocal

def test_task_model():
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ Task")
    print("=" * 40)
    
    with SessionLocal() as db:
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
        task = Task(
            task_id=str(uuid.uuid4()),
            user_id=1,  # –ü—Ä–æ—Å—Ç–æ ID, –±–µ–∑ FK
            topic_id=1,  # –ü—Ä–æ—Å—Ç–æ ID, –±–µ–∑ FK
            reply_to=None,
            context="–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞",
            question="–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç SQLAlchemy 2.0?",
            status="pending"
        )
        
        db.add(task)
        db.commit()
        db.refresh(task)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞: {task.question[:50]}...")
        print(f"   ID: {task.id}")
        print(f"   Task ID: {task.task_id}")
        print(f"   –°—Ç–∞—Ç—É—Å: {task.status}")
        print(f"   User ID: {task.user_id}")
        print(f"   Topic ID: {task.topic_id}")
        print(f"   –ü–æ–ø—ã—Ç–∫–∏: {task.attempts}/{task.max_attempts}")
        print(f"   –°–æ–∑–¥–∞–Ω–æ: {task.created_at}")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        task.status = "processing"
        task.started_at = datetime.now()
        task.attempts += 1
        db.commit()
        
        print(f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω: {task.status}")
        print(f"   –ü–æ–ø—ã—Ç–∫–∏: {task.attempts}")
        print(f"   –ù–∞—á–∞—Ç–æ: {task.started_at}")
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞—á—É
        task.status = "completed"
        task.result = "–û—Ç–≤–µ—Ç –æ—Ç –ò–ò: SQLAlchemy 2.0 –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å..."
        task.completed_at = datetime.now()
        db.commit()
        
        print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task.status}")
        print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {task.result[:50]}...")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–æ: {task.completed_at}")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É —Å –æ—à–∏–±–∫–æ–π
        error_task = Task(
            task_id=str(uuid.uuid4()),
            user_id=2,
            question="–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
            status="failed",
            error_message="–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞",
            attempts=3,
            max_attempts=3
        )
        
        db.add(error_task)
        db.commit()
        db.refresh(error_task)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∑–∞–¥–∞—á–∞ —Å –æ—à–∏–±–∫–æ–π: {error_task.question}")
        print(f"   –°—Ç–∞—Ç—É—Å: {error_task.status}")
        print(f"   –û—à–∏–±–∫–∞: {error_task.error_message}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –∑–∞–¥–∞—á
        all_tasks = db.query(Task).all()
        print(f"\nüìä –í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –±–∞–∑–µ: {len(all_tasks)}")
        
        pending_tasks = db.query(Task).filter(Task.status == "pending").count()
        completed_tasks = db.query(Task).filter(Task.status == "completed").count()
        failed_tasks = db.query(Task).filter(Task.status == "failed").count()
        
        print(f"   –û–∂–∏–¥–∞—é—â–∏—Ö: {pending_tasks}")
        print(f"   –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: {completed_tasks}")
        print(f"   –ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed_tasks}")
        
        # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        db.rollback()
        
        print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")

if __name__ == "__main__":
    test_task_model()
