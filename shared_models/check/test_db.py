#!/usr/bin/env python3
"""–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö. shared models/check/test_db.py"""
import sys
import os
import sqlalchemy as sa

from shared_models.database import engine, SessionLocal
from shared_models.models import User, Topic, Message
from shared_models.schemas import UserRole, Status

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))


def check_connection():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö."""
    try:
        with engine.connect() as connection:
            result = connection.execute(sa.text("SELECT 1 as test"))
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {result.fetchone()}")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False


def create_test_data():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    db = SessionLocal()
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        existing_user = db.query(User).filter(User.email == "test@example.com").first()
        if existing_user:
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_user.username} (ID: {existing_user.id})")
            test_user = existing_user
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            test_user = User(
                username="test_user",
                firstname="–¢–µ—Å—Ç",
                lastname="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å",
                password="hashed_password_here",
                email="test@example.com",
                user_type=UserRole.user,
                status=Status.active
            )
            db.add(test_user)
            db.commit()
            db.refresh(test_user)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {test_user.username} (ID: {test_user.id})")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–µ–º–∞
        existing_topic = db.query(Topic).filter(Topic.title == "–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞").first()
        if existing_topic:
            print(f"‚úÖ –¢–µ–º–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_topic.title} (ID: {existing_topic.id})")
            test_topic = existing_topic
        else:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ç–µ–º—É
            test_topic = Topic(
                title="–¢–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞",
                description="–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                user_id=test_user.id,
                is_active=True
            )
            db.add(test_topic)
            db.commit()
            db.refresh(test_topic)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ—Å—Ç–æ–≤–∞—è —Ç–µ–º–∞: {test_topic.title} (ID: {test_topic.id})")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º —Å–æ–¥–µ—Ä–∂–∏–º—ã–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏)
        from datetime import datetime
        message_content = f"–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}"
        test_message = Message(
            content=message_content,
            author_name=test_user.username,
            topic_id=test_topic.id,
            user_id=test_user.id
        )
        db.add(test_message)
        db.commit()
        db.refresh(test_message)
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (ID: {test_message.id})")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        db.rollback()
        return False
    finally:
        db.close()


def check_data():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    db = SessionLocal()
    try:
        users_count = db.query(User).count()
        topics_count = db.query(Topic).count()
        messages_count = db.query(Message).count()
        
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:")
        print(f"   –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {users_count}")
        print(f"   –¢–µ–º—ã: {topics_count}")
        print(f"   –°–æ–æ–±—â–µ–Ω–∏—è: {messages_count}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if users_count > 0:
            last_user = db.query(User).order_by(User.id.desc()).first()
            if last_user:
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {last_user.username} ({last_user.email})")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        db.close()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    if not check_connection():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")
        return
    
    print("\nüìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    print("=" * 50)
    
    if create_test_data():
        print("\nüìä –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
        print("=" * 50)
        check_data()
        print("\n‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")


if __name__ == "__main__":
    main()
