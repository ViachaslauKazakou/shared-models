#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –º–æ–¥–µ–ª—è–º–∏ –∏ –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
"""

import asyncio
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.orm import sessionmaker
from sqlalchemy import select
from shared_models.models import Base, User, Topic, Message, MessageEmbedding, UserMessageExample, UserKnowledgeRecord
from shared_models.schemas import UserRole, Status
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î
DATABASE_URL = "postgresql+asyncpg://docker:docker@localhost:5433/postgres"


async def test_cascade_deletions():
    """–¢–µ—Å—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –¥–≤–∏–∂–∫–∞ –∏ —Å–µ—Å—Å–∏–∏
    engine = create_async_engine(DATABASE_URL, echo=True)
    async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
        async with engine.begin() as conn:
            await conn.run_sync(Base.metadata.create_all)
        
        async with async_session() as session:
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User(
                username="test_user",
                email="test@example.com",
                password="password123",
                user_type=UserRole.user,
                status=Status.active
            )
            session.add(user)
            await session.commit()
            await session.refresh(user)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ–º—ã
            topic = Topic(
                title="Test Topic",
                description="Test description",
                user_id=user.id
            )
            session.add(topic)
            await session.commit()
            await session.refresh(topic)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Ç–µ–º–∞: {topic.id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            message = Message(
                content="Test message content",
                author_name=user.username,
                topic_id=topic.id,
                user_id=user.id
            )
            session.add(message)
            await session.commit()
            await session.refresh(message)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–º–µ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_message_example = UserMessageExample(
                user_id=user.id,
                character_id="test_character",
                content="Test user message example",
                content_embedding=np.random.random(1536).tolist(),
                context_embedding=np.random.random(1536).tolist()
            )
            session.add(user_message_example)
            await session.commit()
            await session.refresh(user_message_example)
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–∏–º–µ—Ä —Å–æ–æ–±—â–µ–Ω–∏—è: {user_message_example.id}")
            
            # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            message_embedding1 = MessageEmbedding(
                message_id=message.id,
                topic_id=topic.id,
                content="Message embedding content",
                embedding=np.random.random(1536).tolist()
            )
            
            message_embedding2 = MessageEmbedding(
                user_message_example_id=user_message_example.id,
                content="User message example embedding",
                embedding=np.random.random(1536).tolist()
            )
            
            session.add_all([message_embedding1, message_embedding2])
            await session.commit()
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {message_embedding1.id}, {message_embedding2.id}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–µ–π –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
            message_embeddings_count = len((await session.execute(
                select(MessageEmbedding)
            )).scalars().all())
            
            user_examples_count = len((await session.execute(
                select(UserMessageExample)
            )).scalars().all())
            
            print("üìä –ü–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º:")
            print(f"   MessageEmbedding: {message_embeddings_count}")
            print(f"   UserMessageExample: {user_examples_count}")
            
            # –¢–µ—Å—Ç 1: –£–¥–∞–ª–µ–Ω–∏–µ UserMessageExample –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ MessageEmbedding
            print("\nüóëÔ∏è –¢–µ—Å—Ç 1: –£–¥–∞–ª–µ–Ω–∏–µ UserMessageExample")
            await session.delete(user_message_example)
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
            remaining_embeddings = (await session.execute(
                select(MessageEmbedding).where(MessageEmbedding.user_message_example_id.isnot(None))
            )).scalars().all()
            
            print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è UserMessageExample: {len(remaining_embeddings)}")
            assert len(remaining_embeddings) == 0, "MessageEmbedding –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ"
            
            # –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ Message –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å —Å–≤—è–∑–∞–Ω–Ω—ã–µ MessageEmbedding
            print("\nüóëÔ∏è –¢–µ—Å—Ç 2: –£–¥–∞–ª–µ–Ω–∏–µ Message")
            await session.delete(message)
            await session.commit()
            
            remaining_message_embeddings = (await session.execute(
                select(MessageEmbedding).where(MessageEmbedding.message_id.isnot(None))
            )).scalars().all()
            
            print(f"‚úÖ –≠–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è Message: {len(remaining_message_embeddings)}")
            assert len(remaining_message_embeddings) == 0, "MessageEmbedding –¥–æ–ª–∂–Ω—ã —É–¥–∞–ª—è—Ç—å—Å—è –∫–∞—Å–∫–∞–¥–Ω–æ"
            
            # –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ User –¥–æ–ª–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("\nüóëÔ∏è –¢–µ—Å—Ç 3: –£–¥–∞–ª–µ–Ω–∏–µ User")
            await session.delete(user)
            await session.commit()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã
            topics_count = len((await session.execute(select(Topic))).scalars().all())
            knowledge_records_count = len((await session.execute(select(UserKnowledgeRecord))).scalars().all())
            
            print(f"‚úÖ –ó–∞–ø–∏—Å–µ–π –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è User:")
            print(f"   Topics: {topics_count}")
            print(f"   UserKnowledgeRecord: {knowledge_records_count}")
            
            print("\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–∞—Ö: {e}")
        raise
    finally:
        await engine.dispose()

if __name__ == "__main__":
    asyncio.run(test_cascade_deletions())
